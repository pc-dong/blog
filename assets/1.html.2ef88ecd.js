import{_ as p}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c as i,b as n,d as s,e,a as t,r as l}from"./app.7d343ce7.js";const c={},u=n("h1",{id:"通过自定义注解实现rest风格的rsocket-crud应用",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#通过自定义注解实现rest风格的rsocket-crud应用","aria-hidden":"true"},"#"),s(" 通过自定义注解实现REST风格的RSocket CRUD应用")],-1),r=n("h2",{id:"背景",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#背景","aria-hidden":"true"},"#"),s(" 背景")],-1),d={href:"https://rsocket.io/",target:"_blank",rel:"noopener noreferrer"},k={href:"https://www.infoq.com/articles/give-rest-a-rest-rsocket/",target:"_blank",rel:"noopener noreferrer"},v=t(`<p>Spring也对RSocket应用开发做了很多支持，可以方便地开发出RSocket应用。但是RSocket是一种消息驱动协议，仅能通过消息路径（router）区分接口，没有类似Http中Method区分CRUD操作，需要在资源路径中添加操作前缀或后缀区分对资源的操作类型，本文给出了一种通过自定义注解的方式添加统一后缀的方法，可以比较优雅地定义REST风格的RSocket CRUD接口。</p><h2 id="rsocket交互模式" tabindex="-1"><a class="header-anchor" href="#rsocket交互模式" aria-hidden="true">#</a> RSocket交互模式</h2><p>RSocket协议定义了四种交互模式：</p><ul><li>Request/Response：单个请求接收单个响应，类似Http的请求/响应模式，但它是异步非阻塞和多路复用的。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Payload</span><span class="token punctuation">&gt;</span></span> <span class="token function">requestResponse</span><span class="token punctuation">(</span><span class="token class-name">Payload</span> payload<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>Fire-and-Forget：发送请求不用等待响应。适用于非关键事件日志、埋点上报等不关心响应的场景，相比于Http可以减少等待响应的网络和应用资源浪费。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">fireAndForget</span><span class="token punctuation">(</span><span class="token class-name">Payload</span> payload<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>Request/Stream：单个请求可以接收多个响应。可应用于列表资源获取，服务端可在单个资源准备好后即返回，无需等所有资源都准备好，可以节约服务端缓存占用。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Payload</span><span class="token punctuation">&gt;</span></span> <span class="token function">requestStream</span><span class="token punctuation">(</span><span class="token class-name">Payload</span> payload<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>Channel: 该模式下客户端可以发送多个请求数据同时接收多个响应。在此模型中，消息流在两个方向上异步流动。例如客户端将文件分片多次上传，服务端返回每次的上传结果。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Payload</span><span class="token punctuation">&gt;</span></span> <span class="token function">requestChannel</span><span class="token punctuation">(</span><span class="token class-name">Publisher</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Payload</span><span class="token punctuation">&gt;</span></span> payloads<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,11),m=n("p",null,"RSocket协议支持双向通信，因此建立链接后，服务端也可以主动向客户端发起请求。",-1),g={href:"https://time.geekbang.org/column/article/397723",target:"_blank",rel:"noopener noreferrer"},b=t(`<h2 id="基于spring实现rsocket-服务端api与消费" tabindex="-1"><a class="header-anchor" href="#基于spring实现rsocket-服务端api与消费" aria-hidden="true">#</a> 基于Spring实现RSocket 服务端API与消费</h2><h3 id="服务端api实现" tabindex="-1"><a class="header-anchor" href="#服务端api实现" aria-hidden="true">#</a> 服务端API实现</h3><ul><li>添加依赖</li></ul><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code>dependencies <span class="token punctuation">{</span>
	implementation <span class="token string">&#39;org.springframework.boot:spring-boot-starter-rsocket&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>配置文件中设置传输层协议和端口</li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">rsocket</span><span class="token punctuation">:</span>
    <span class="token key atrule">server</span><span class="token punctuation">:</span>
      <span class="token key atrule">transport</span><span class="token punctuation">:</span> tcp
      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">7001</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>添加Controller类，并添加@Controller注解</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Controller</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RsocketController</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>定义API处理方法</li></ul><p>Spring中通过@MessageMapping注解声明RSocket API，API之间通过消息路径（router） 区分。 Request/Response模式方法举例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@MessageMapping</span><span class="token punctuation">(</span><span class="token string">&quot;toUpperCase&quot;</span><span class="token punctuation">)</span>
<span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Message</span><span class="token punctuation">&gt;</span></span> <span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Payload</span> <span class="token class-name">String</span> payload<span class="token punctuation">,</span>
                          <span class="token annotation punctuation">@Header</span><span class="token punctuation">(</span><span class="token constant">CLIENT_ID</span><span class="token punctuation">)</span> <span class="token class-name">String</span> clientId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>payload<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Message</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;toUpperCase &quot;</span> <span class="token operator">+</span> clientId<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Fire-and-Forget模式方法举例:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@MessageMapping</span><span class="token punctuation">(</span><span class="token string">&quot;log&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;receive log message: {}&quot;</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Request/Stream模式方法举例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@MessageMapping</span><span class="token punctuation">(</span><span class="token string">&quot;splitString&quot;</span><span class="token punctuation">)</span>
<span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">&gt;</span></span> <span class="token function">splitString</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Payload</span> <span class="token class-name">String</span> payload<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">interval</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>index <span class="token operator">-&gt;</span> payload<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>index<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span>payload<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">doOnNext</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Channel模式方法举例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@MessageMapping</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;channelToUpperCase&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Message</span><span class="token punctuation">&gt;</span></span> <span class="token function">channelToUpperCase</span><span class="token punctuation">(</span><span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> messages<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">interval</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">zipWith</span><span class="token punctuation">(</span>messages<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>tuple <span class="token operator">-&gt;</span> tuple<span class="token punctuation">.</span><span class="token function">getT2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Message</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="rsocket-api消费" tabindex="-1"><a class="header-anchor" href="#rsocket-api消费" aria-hidden="true">#</a> RSocket API消费</h3><h4 id="rsc命令行工具" tabindex="-1"><a class="header-anchor" href="#rsc命令行工具" aria-hidden="true">#</a> RSC命令行工具</h4>`,19),h={href:"https://github.com/making/rsc",target:"_blank",rel:"noopener noreferrer"},M={href:"https://github.com/making/rsc",target:"_blank",rel:"noopener noreferrer"},S=t(`<ul><li>Request/Response</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> $ rsc <span class="token parameter variable">--route</span><span class="token operator">=</span>toUpperCase <span class="token parameter variable">--request</span> <span class="token parameter variable">-m</span> <span class="token number">123</span> <span class="token parameter variable">--mmt</span> message/x.client.id <span class="token parameter variable">--data</span><span class="token operator">=</span>Sunday tcp://localhost:7001

<span class="token punctuation">{</span><span class="token string">&quot;message&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;SUNDAY&quot;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Fire-and-Forget</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ rsc <span class="token parameter variable">--route</span><span class="token operator">=</span>log <span class="token parameter variable">--fnf</span> <span class="token parameter variable">--data</span><span class="token operator">=</span>Sunday tcp://localhost:7001
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>Request/Stream</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ rsc <span class="token parameter variable">--route</span><span class="token operator">=</span>splitString <span class="token parameter variable">--stream</span> <span class="token parameter variable">--data</span><span class="token operator">=</span>Sunday tcp://localhost:7001

<span class="token string">&quot;S&quot;</span>
<span class="token string">&quot;u&quot;</span>
<span class="token string">&quot;n&quot;</span>
<span class="token string">&quot;d&quot;</span>
<span class="token string">&quot;a&quot;</span>
<span class="token string">&quot;y&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Channel</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ rsc --route=channelToUpperCase --channel --data=- tcp://localhost:7001 

&gt;hello
{&quot;message&quot;:&quot;HELLO&quot;}
&gt;rsocket
{&quot;message&quot;:&quot;RSOCKET&quot;}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="通过spring中提供的rsocketrequester消费rsocket-api" tabindex="-1"><a class="header-anchor" href="#通过spring中提供的rsocketrequester消费rsocket-api" aria-hidden="true">#</a> 通过Spring中提供的RSocketRequester消费RSocket API</h4><ul><li>将RSocketRequester定义为Spring Bean</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>@Bean
public RSocketRequester requester(RSocketMessageHandler handler) {
    return RSocketRequester.builder()
            .rsocketStrategies(handler.getRSocketStrategies())
            .rsocketConnector(connector -&gt; connector.acceptor(handler.responder()))
            .tcp(&quot;localhost&quot;, port);
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>消费代码举例</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>// Request/Response
Mono&lt;Message&gt; toUpperCase(String message) {
    return requester.route(&quot;toUpperCase&quot;)
            .metadata(metadataSpec -&gt; metadataSpec.metadata(UUID.randomUUID().toString(),
                    MimeType.valueOf(&quot;message/x.client.id&quot;)))
            .data(message)
            .retrieveMono(Message.class);
}

// Fire-and-Forget
Mono&lt;Void&gt; log(String message) {
    return requester.route(&quot;log&quot;)
            .data(message)
            .retrieveMono(Void.class);
}

// Request/Stream
Mono&lt;List&lt;String&gt;&gt; splitString(String message) {
    return requester.route(&quot;splitString&quot;)
            .data(message)
            .retrieveFlux(Character.class)
            .map(c -&gt; c.toString())
            .doOnNext(System.out::println)
            .collectList();

}

// Channel
Flux&lt;Message&gt; channelToUpperCase(List&lt;String&gt; messages) {
    return requester.route(&quot;channelToUpperCase&quot;)
            .data(Flux.fromIterable(messages), String.class)
            .retrieveFlux(Message.class)
            .doOnNext(System.out::println);
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="基于spring实现rest风格crud接口" tabindex="-1"><a class="header-anchor" href="#基于spring实现rest风格crud接口" aria-hidden="true">#</a> 基于Spring实现REST风格CRUD接口</h2><p>RSocket API 只能通过接口路径（router）区分不同接口，没有Http协议中的Method来区分CRUD操作，因此Spring中也未提供类似@GettingMapping注解。要实现REST风格的接口，需要在资源路径上添加操作前缀或后缀，为了减少重复代码和便于项目统一，我想到可以通过自定义注解的方式来实现，下面给出关键实现代码。</p><ul><li>添加自定义CRUD方法对应注解：</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">DeleteMessageMapping</span> <span class="token punctuation">{</span>

    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">GetMessageMapping</span><span class="token punctuation">{</span>

    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">PostMessageMapping</span> <span class="token punctuation">{</span>

    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">PutMessageMapping</span> <span class="token punctuation">{</span>

    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>定义MyRSocketMessageHandler继承RSocketMessageHandler，重写getCondition方法</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>public class MyRSocketMessageHandler extends RSocketMessageHandler {
    private static final String GET = &quot;get&quot;;
    private static final String POST = &quot;post&quot;;
    private static final String DELETE = &quot;delete&quot;;
    private static final String PUT = &quot;put&quot;;

    @Override
    @Nullable
    protected CompositeMessageCondition getCondition(AnnotatedElement element) {
        CompositeMessageCondition condition = super.getCondition(element);
        if(null != condition) {
            return condition;
        }

        GetMessageMapping getMessageMappingAnn = AnnotatedElementUtils.findMergedAnnotation(element, GetMessageMapping.class);
        if (getMessageMappingAnn != null) {
            return getCompositeMessageCondition(getMessageMappingAnn.value(), GET);
        }

        PostMessageMapping postMessageMappingAnn = AnnotatedElementUtils.findMergedAnnotation(element, PostMessageMapping.class);
        if (postMessageMappingAnn != null) {
            return getCompositeMessageCondition(postMessageMappingAnn.value(), POST);
        }

        DeleteMessageMapping deleteMessageMappingAnn = AnnotatedElementUtils.findMergedAnnotation(element, DeleteMessageMapping.class);
        if (deleteMessageMappingAnn != null) {
            return getCompositeMessageCondition(deleteMessageMappingAnn.value(), DELETE);
        }

        PutMessageMapping putMessageMappingAnn = AnnotatedElementUtils.findMergedAnnotation(element, PutMessageMapping.class);
        if (putMessageMappingAnn != null) {
            return getCompositeMessageCondition(putMessageMappingAnn.value(), PUT);
        }

        return null;
    }

    @NotNull
    private CompositeMessageCondition getCompositeMessageCondition(String[] value, String suffix) {
        String[] resultValue = value.length == 0 ? new String[]{suffix} : Arrays.stream(value)
                .map(item -&gt; item + (StringUtils.hasLength(item) ? &quot;.&quot; : &quot;&quot;) + suffix)
                .collect(Collectors.toList())
                .toArray(new String[]{});
        return new CompositeMessageCondition(
                RSocketFrameTypeMessageCondition.EMPTY_CONDITION,
                new DestinationPatternsMessageCondition(processDestinations(resultValue), obtainRouteMatcher()));
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>声明RSocketMessageHandler Bean 替换默认RSocketMessageHandler实现</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>@Bean
@Primary
public RSocketMessageHandler messageHandler(RSocketStrategies rSocketStrategies,
                                            ObjectProvider&lt;RSocketMessageHandlerCustomizer&gt; customizers) {
    RSocketMessageHandler messageHandler = new MyRSocketMessageHandler();
    messageHandler.setRSocketStrategies(rSocketStrategies);
    customizers.orderedStream().forEach((customizer) -&gt; customizer.customize(messageHandler));
    return messageHandler;
}

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>定义接口</li></ul><p>至此就可以通过自定义注解优雅地定义REST风格的RSocket CRUD接口了，示例代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Controller</span>
<span class="token annotation punctuation">@RequiredArgsConstructor</span>
<span class="token annotation punctuation">@MessageMapping</span><span class="token punctuation">(</span><span class="token string">&quot;posters&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PosterController</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Posters</span> posters<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@PostMessageMapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Poster</span><span class="token punctuation">&gt;</span></span> <span class="token function">addNew</span><span class="token punctuation">(</span><span class="token class-name">Poster</span> poster<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> posters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>poster<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@GetMessageMapping</span><span class="token punctuation">(</span><span class="token string">&quot;{id}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Poster</span><span class="token punctuation">&gt;</span></span> <span class="token function">getById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@DestinationVariable</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> posters<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Poster<span class="token punctuation">.</span>PosterId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@PutMessageMapping</span><span class="token punctuation">(</span><span class="token string">&quot;{id}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token annotation punctuation">@DestinationVariable</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> id<span class="token punctuation">,</span> <span class="token annotation punctuation">@Payload</span> <span class="token class-name">Poster</span> poster<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> posters<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Poster<span class="token punctuation">.</span>PosterId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span> poster<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@DeleteMessageMapping</span><span class="token punctuation">(</span><span class="token string">&quot;{id}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token annotation punctuation">@DestinationVariable</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> posters<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Poster<span class="token punctuation">.</span>PosterId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@GetMessageMapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Poster</span><span class="token punctuation">&gt;</span></span> <span class="token function">listAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> posters<span class="token punctuation">.</span><span class="token function">listAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Posters</span> <span class="token punctuation">{</span>
    <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Poster</span><span class="token punctuation">&gt;</span></span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Poster</span> poster<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">Poster<span class="token punctuation">.</span>PosterId</span> id<span class="token punctuation">,</span> <span class="token class-name">Poster</span> poster<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">Poster<span class="token punctuation">.</span>PosterId</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Poster</span><span class="token punctuation">&gt;</span></span> <span class="token function">getById</span><span class="token punctuation">(</span><span class="token class-name">Poster<span class="token punctuation">.</span>PosterId</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Poster</span><span class="token punctuation">&gt;</span></span> <span class="token function">listAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2>`,29),f={href:"https://github.com/pc-dong/rsocket-demos",target:"_blank",rel:"noopener noreferrer"};function q(y,R){const a=l("ExternalLinkIcon");return o(),i("div",null,[u,r,n("blockquote",null,[n("p",null,[n("a",d,[s("RSocket"),e(a)]),s("是一种新的应用层二进制的点对点通信协议，被认为"),n("a",k,[s("比HTTP更适合于微服务应用"),e(a)]),s("。基于Reactive Streams规范设计，具有双向异步通信、多路复用、消息驱动、支持应用层背压流量控制、断点续传等特性。传输层协议基于抽象设计，可以在TCP、WebSocket等协议间切换，因此可以应用于Web应用、物联网、移动通信等多种场景。 由Facebook、Netifi和Pivotal等公司工程师开发，提供了Java，JavaScript，C++和Kotlin等多语言实现，其中Java版本基于Reactor框架实现，可以方便和Webflux结合使用。目前该协议第一个最终正式版本尚未发布，但已经得到了很多公司的支持和投入，Dubbo从版本3开始也针对RSocket进行了适配，因此值得学习。")])]),v,n("blockquote",null,[m,n("p",null,[s("RSocket是消息驱动的异步通信协议，徐昊老师在《如何落地业务建模》课程中讲解过，"),n("a",g,[s("异步调用可以避免弹性耦合"),e(a)]),s(",因此采用RSocket可以从通信协议层面实现弹性解耦。")])]),b,n("p",null,[n("a",h,[s("RSC"),e(a)]),s("是类似与curl 命令的RSocket 命令客户端工具， 方便对RSocket API进行调试，具体安装使用方法可以查看"),n("a",M,[s("GitHub - RSocket Client CLI (RSC) "),e(a)]),s("。这里分别给出四种通信模式的命令以及返回示例：")]),S,n("p",null,[s("本文简单介绍了RSocket的一些背景知识，通过Spring怎么创建RSocket应用以及RSocket接口如何消费，并给出了一种在Spring中基于自定义注解方式优雅定义REST风格的RSocket接口的方法，相关代码见"),n("a",f,[s("GitHub - pc-dong/rsocket-demos"),e(a)]),s("。")])])}const C=p(c,[["render",q],["__file","1.html.vue"]]);export{C as default};
