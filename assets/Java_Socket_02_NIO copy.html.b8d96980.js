const t=JSON.parse('{"key":"v-f74ea7ae","path":"/posts/reactor/Java_Socket_02_NIO%20copy.html","title":"Java Socket编程02 - 非阻塞IO & IO 多路复用","lang":"en-US","frontmatter":{"icon":"edit","date":"2024-02-18T00:00:00.000Z","category":["响应式编程"],"tag":["java","nio"],"description":"非阻塞IO 非阻塞IO是指当用户线程发起IO请求后，内核会立即返回，不会阻塞用户线程，用户线程可以继续做其他事情，通过轮询的方式检查IO操作是否完成。 单纯的使用非阻塞IO，不能显著提高IO效率，因为轮询的方式会消耗大量的CPU资源。因此，非阻塞IO通常与IO多路复用结合使用。 Java中的非阻塞IO Java中的非阻塞IO相关工具类库在java.ni...","head":[["meta",{"property":"og:url","content":"https://pc-dong.github.io/posts/reactor/Java_Socket_02_NIO%20copy.html"}],["meta",{"property":"og:site_name","content":"PC-Dong"}],["meta",{"property":"og:title","content":"Java Socket编程02 - 非阻塞IO & IO 多路复用"}],["meta",{"property":"og:description","content":"非阻塞IO 非阻塞IO是指当用户线程发起IO请求后，内核会立即返回，不会阻塞用户线程，用户线程可以继续做其他事情，通过轮询的方式检查IO操作是否完成。 单纯的使用非阻塞IO，不能显著提高IO效率，因为轮询的方式会消耗大量的CPU资源。因此，非阻塞IO通常与IO多路复用结合使用。 Java中的非阻塞IO Java中的非阻塞IO相关工具类库在java.ni..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2024-02-18T12:20:34.000Z"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"nio"}],["meta",{"property":"article:published_time","content":"2024-02-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-18T12:20:34.000Z"}]]},"excerpt":"","headers":[{"level":2,"title":"非阻塞IO","slug":"非阻塞io","link":"#非阻塞io","children":[]},{"level":2,"title":"Java中的非阻塞IO","slug":"java中的非阻塞io","link":"#java中的非阻塞io","children":[]},{"level":2,"title":"IO多路复用","slug":"io多路复用","link":"#io多路复用","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1708258834000,"updatedTime":1708258834000,"contributors":[{"name":"peichao.dong","email":"peichao.dong@thoughtworks.com","commits":1}]},"readingTime":{"minutes":4.22,"words":1265},"filePathRelative":"posts/reactor/Java_Socket_02_NIO copy.md","localizedDate":"February 18, 2024"}');export{t as data};
